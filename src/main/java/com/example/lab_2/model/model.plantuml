@startuml

title __MODEL's Class Diagram__\n


    namespace om.example.lab_2 {
      namespace model {
        interface com.example.lab_2.model.IFactory {
            {abstract} + createShape()
        }
      }
    }

  


    namespace om.example.lab_2 {
      namespace model {
        class com.example.lab_2.model.MyAngle {
            - length : double
            + MyAngle()
            + MyAngle()
            + draw()
        }
      }
    }

  


    namespace om.example.lab_2 {
      namespace model {
        class com.example.lab_2.model.MyCircle {
            - length : double
            - width : double
            + MyCircle()
            + MyCircle()
            + draw()
        }
      }
    }

  


    namespace om.example.lab_2 {
      namespace model {
        class com.example.lab_2.model.MyLine {
            - x_end : double
            - y_end : double
            + MyLine()
            + MyLine()
            + draw()
        }
      }
    }

  

    namespace om.example.lab_2 {
      namespace model {
        class com.example.lab_2.model.MyPentagon {
            ~ length : double
            + MyPentagon()
            + MyPentagon()
            + draw()
        }
      }
    }

  


    namespace om.example.lab_2 {
      namespace model {
        class com.example.lab_2.model.MyRectangle {
            - length : double
            - width : double
            + MyRectangle()
            + MyRectangle()
            + draw()
        }
      }
    }

  

    namespace om.example.lab_2 {
      namespace model {
        abstract class com.example.lab_2.model.MyShape {
            # color : Color
            # x : double
            # y : double
            + MyShape()
            {abstract} + draw()
            + getColor()
            + getX()
            + getY()
            + setColor()
            + setX()
            + setY()
        }
      }

  }
  


    namespace om.example.lab_2 {
      namespace model {
        class com.example.lab_2.model.MyTriangle {
            - xPoints : double[]
            - yPoints : double[]
            + MyTriangle()
            + MyTriangle()
            + draw()
        }
      }
    }

  

    namespace om.example.lab_2 {
      namespace model {
        class com.example.lab_2.model.ShapeFactory {
            + createShape()
        }
      }
    }
  
  

  com.example.lab_2.model.MyAngle -up-|> com.example.lab_2.model.MyShape
  com.example.lab_2.model.MyCircle -up-|> com.example.lab_2.model.MyShape
  com.example.lab_2.model.MyLine -up-|> com.example.lab_2.model.MyShape
  com.example.lab_2.model.MyPentagon -up-|> com.example.lab_2.model.MyShape
  com.example.lab_2.model.MyRectangle -up-|> com.example.lab_2.model.MyShape
  com.example.lab_2.model.MyTriangle -up-|> com.example.lab_2.model.MyShape
  com.example.lab_2.model.ShapeFactory .up.|> com.example.lab_2.model.IFactory


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
